import sqlalchemy
import sqlalchemy as sq
from sqlalchemy.orm import declarative_base, relationship, sessionmaker
import json
from sqlalchemy import select

Base = declarative_base()


class Publisher(Base):
    __tablename__ = "publisher"
    id = sq.Column(sq.Integer, primary_key=True)
    name = sq.Column(sq.String(length=40), unique=True)
    books = relationship("Book", back_populates="publisher")

    def __str__(self):
        return f'Publisher: {self.id}, {self.name}'

class Book(Base):
    __tablename__ = "book"
    id = sq.Column(sq.Integer, primary_key=True)
    title = sq.Column(sq.Text, nullable=False)
    id_publisher = sq.Column(sq.Integer, sq.ForeignKey("publisher.id"), nullable=False)
    publisher = relationship("Publisher", back_populates="books")
    stocks = relationship("Stock", back_populates="book")

    def __str__(self):
        return f'Book: {self.id}, {self.title}, {self.id_publisher}, {self.publisher}'


class Stock(Base):
    __tablename__ = "stock"
    id = sq.Column(sq.Integer, primary_key=True)
    id_book = sq.Column(sq.Integer, sq.ForeignKey("book.id"), nullable=False)
    id_shop = sq.Column(sq.Integer, sq.ForeignKey("shop.id"), nullable=False)
    count = sq.Column(sq.Integer, nullable=False)
    book = relationship("Book", back_populates="stocks")
    shop = relationship("Shop", back_populates="stocks")
    sales = relationship("Sale", back_populates="stock")

    def __str__(self):
        return f'Stock: {self.id}, {self.id_book}, {self.id_shop}, {self.count}'

class Sale(Base):
    __tablename__ = "sale"
    id = sq.Column(sq.Integer, primary_key=True)
    price = sq.Column(sq.Text, nullable=False)
    date_sale = sq.Column(sq.Date, nullable=False)
    id_stock = sq.Column(sq.Integer, sq.ForeignKey("stock.id"), nullable=False)
    stock = relationship("Stock", back_populates="sales")
    count = sq.Column(sq.Integer, nullable=False)

    def __str__(self):
        return f'Sale: {self.id}, {self.price}, {self.date_sale}, {self.id_stock}, {self.count}'

class Shop(Base):
    __tablename__ = "shop"
    id = sq.Column(sq.Integer, primary_key=True)
    name = sq.Column(sq.String(length=40), unique=True)
    stocks = relationship("Stock", back_populates="shop")

    def __str__(self):
        return f'Shop: {self.id}, {self.name}'

def create_tables(engine):
    # Base.metadata.drop_all(engine)
    Base.metadata.create_all(engine)

def drop_tables(engine):
    Base.metadata.drop_all(engine)

DSN = "postgresql://postgres:98199819@localhost:5432/bookshop"
engine = sqlalchemy.create_engine(DSN)
drop_tables(engine)
create_tables(engine)

# сессия
Session = sessionmaker(bind=engine)
session = Session()

with open(r'C:\Users\serge\PyCharmMiscProject\БД_SQL\06\tests_data.json', 'r') as fd:
    data = json.load(fd)

for record in data:
    model = {
        'publisher': Publisher,
        'shop': Shop,
        'book': Book,
        'stock': Stock,
        'sale': Sale,
    }[record.get('model')]
    session.add(model(id=record.get('pk'), **record.get('fields')))
session.commit()


user_input = input("Введите имя или ID издателя: ")
# user_input = "O’Reilly"
Publisher_filter = Publisher.name == user_input
for title, shop_name, price, date_sale in session.query(Book.title, Shop.name, Sale.price, Sale.date_sale).join(Stock, Stock.id_book == Book.id).join(Shop, Shop.id == Stock.id_shop).join(Sale, Sale.id_stock == Stock.id).join(Publisher, Publisher.id == Book.id_publisher).filter(Publisher_filter).all():
    print(f"{title} | {shop_name} | {price} | {date_sale }")
print(session.query(Book.title, Shop.name, Sale.price, Sale.date_sale).join(Stock, Stock.id_book == Book.id).join(Shop, Shop.id == Stock.id_shop).join(Sale, Sale.id_stock == Stock.id).join(Publisher, Publisher.id == Book.id_publisher).filter(Publisher_filter).all())





